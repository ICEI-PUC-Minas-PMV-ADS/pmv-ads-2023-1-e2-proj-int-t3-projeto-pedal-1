// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projetoWebPedal.Models;

namespace projetoWebPedal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("projetoWebPedal.Models.Roteiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dificuldade")
                        .HasColumnType("int");

                    b.Property<int>("Distancia")
                        .HasColumnType("int");

                    b.Property<DateTime>("Final")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PontoEncontro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProponenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProponenteId");

                    b.ToTable("Roteiros");
                });

            modelBuilder.Entity("projetoWebPedal.Models.RoteiroUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Peso")
                        .HasColumnType("int");

                    b.Property<int>("RoteiroId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoteiroId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RoteiroUsuarios");
                });

            modelBuilder.Entity("projetoWebPedal.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Altura")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("projetoWebPedal.Models.Proponente", b =>
                {
                    b.HasBaseType("projetoWebPedal.Models.Usuario");

                    b.ToTable("Proponentes");
                });

            modelBuilder.Entity("projetoWebPedal.Models.Roteiro", b =>
                {
                    b.HasOne("projetoWebPedal.Models.Proponente", "Proponente")
                        .WithMany("Roteiros")
                        .HasForeignKey("ProponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proponente");
                });

            modelBuilder.Entity("projetoWebPedal.Models.RoteiroUsuario", b =>
                {
                    b.HasOne("projetoWebPedal.Models.Roteiro", "Roteiro")
                        .WithMany()
                        .HasForeignKey("RoteiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetoWebPedal.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roteiro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("projetoWebPedal.Models.Proponente", b =>
                {
                    b.HasOne("projetoWebPedal.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("projetoWebPedal.Models.Proponente", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projetoWebPedal.Models.Proponente", b =>
                {
                    b.Navigation("Roteiros");
                });
#pragma warning restore 612, 618
        }
    }
}
